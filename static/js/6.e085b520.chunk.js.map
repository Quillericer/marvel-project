{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["setContent","process","Component","data","Skeleton","Spinner","ErrorMessage","Error","ComicsList","useMarvelService","getAllComics","setProcess","useState","newComicLoading","setNewComicLoading","offset","setOffset","comicEnded","setComicEnded","comicList","setComicList","useEffect","onRequest","initial","then","onComicListLoaded","newComicList","ended","className","arr","items","map","item","i","imgStyle","thumbnail","to","id","src","alt","style","title","price","renderItems","onClick","disabled","ComicsPage","Helmet","name","content","AppBanner","img","display","width","height","objectFit","margin","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacterByName","getCharacter","_transformComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.e085b520.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from \"../skeleton/Skeleton\";\n\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n      case \"waiting\":\n        return <Skeleton />;\n      case \"loading\":\n        return <Spinner />;\n      case \"error\":\n        return <ErrorMessage />;\n      case \"confirmed\":\n        return <Component data={data}></Component>;\n      default:\n        throw new Error(\"Unexpected process state\");\n    }\n  };\n\nconst ComicsList = () => {\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n    const [newComicLoading, setNewComicLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicEnded, setComicEnded] = useState(false);\n    const [comicList, setComicList] = useState([]);\n\n    useEffect(() => onRequest(offset, true), [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewComicLoading(false) : setNewComicLoading(true);\n        getAllComics(offset)\n            .then(onComicListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicListLoaded = (newComicList) => {\n        let ended = false;\n        if (newComicList < 8) {\n            ended = true;\n        }\n        setComicList(comicList => [...comicList, ...newComicList]);\n        setComicEnded(ended);\n        setNewComicLoading(false);\n        setOffset(offset => offset + 8);\n    }\n    \n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit': 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit': 'contain'};\n            }\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt=\"x-men\" className=\"comics__item-img\" style={imgStyle}/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicList), newComicLoading)}\n            <button\n                style={{'display': comicEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n                disabled={newComicLoading}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with a comic list\"\r\n                />\r\n                <title>Marvel Comics</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} alt='error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=a26e0c2c935a8c6a7038f169b279b71c';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени. \r\n    // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n\r\n    // Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting'); // state machine with a default value \"waiting\"\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}