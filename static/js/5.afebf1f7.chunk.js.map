{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/form/Form.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comic","comics","CharInfo","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","CustomForm","getCharacterByName","loading","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","decoration","img","display","width","height","objectFit","margin","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/5.afebf1f7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from \"../../utils/setContent\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n\n    const [char, setChar] = useState({});\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])\n\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // диапазон рандомных чисел, чтобы персонажи случайно генерировались (гуглится функция за секунд 20)\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n\n        return (\n            <div className=\"randomchar\">\n                {setContent(process, View, char)}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\nconst View = ({data}) => { // простой рендерящий компонент, который не имеет логики\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n                    <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n                    <div className=\"randomchar__info\">\n                        <p className=\"randomchar__name\">{name}</p>\n                        <p className=\"randomchar__descr\">\n                            {description}\n                        </p>\n                        <div className=\"randomchar__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n      case \"waiting\":\n        return <Spinner />;\n      case \"loading\":\n        return newItemLoading ? <Component /> : <Spinner />\n      case \"error\":\n        return <ErrorMessage />;\n      case \"confirmed\":\n        return <Component />\n      default:\n        throw new Error(\"Unexpected process state\");\n    }\n};\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    const renderItems = arr => {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n                \n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n    }, [process])\n    \n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => updateChar(), [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n        // const skeleton = char || loading || error ? null : <Skeleton/>\n        \n        // const errorMessage = error ? <ErrorMessage/> : null; // если у нас есть ошибка, то будет отрисован компонент ErrorMessage, иначе мы просто вернем null\n        // const spinner = loading ? <Spinner/> : null; // то же самое со спиннером\n        // const content = !(loading || error || !char) ? <View char={char}/> : null; // если нет загрузки или ошибки, то у нас будет отрисовываться компонент View\n        \n        return (\n          <div className=\"char__wrapper\">\n            <div className=\"char__info\">\n                {setContent(process, View, char)}\n            </div>\n          </div>\n            \n        )\n    \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, wiki, homepage, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'unset'};\n    }\n    let comic;\n    if (comics.length === 0) {\n        comic = \"This character doesn't have comics.\";\n    } else {\n        comics.length = 10;\n        comic = comics.map((item, i) => {\n            return (\n                <li className=\"char__comics-item\" key={i}>\n                    {item.name}\n                </li>\n            )\n        })\n    }\n    return (\n      <>\n        <div className=\"char__basics\">\n          <img src={thumbnail} alt={name} style={imgStyle}/>\n          <div>\n            <div className=\"char__info-name\">{name}</div>\n            <div className=\"char__btns\">\n              <a href={homepage} className=\"button button__main\">\n                <div className=\"inner\">homepage</div>\n              </a>\n              <a href={wiki} className=\"button button__secondary\">\n                <div className=\"inner\">Wiki</div>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className=\"char__descr\">\n          {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comic}\n        </ul>\n      </>\n    );\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error,errorInfo) {\r\n        console.log(error,errorInfo)\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.error === true) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children; // будут возвращаться компоненты, которые находятся внутри компонента ErrorBoundary (в нашем случае это CharInfo,RandomChar,CharList)\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './form.scss';\r\n\r\nconst CustomForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/marvel-project/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = {({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CustomForm from '../form/Form';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id); // значение стейта равно id\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n            <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CustomForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n                \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} alt='error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=a26e0c2c935a8c6a7038f169b279b71c';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени. \r\n    // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n\r\n    // Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting'); // state machine with a default value \"waiting\"\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    case \"confirmed\":\r\n      return <Component data={data}></Component>;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"sourceRoot":""}